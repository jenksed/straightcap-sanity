import { defineType, defineField, defineArrayMember } from 'sanity'

export const article = defineType({
  name: 'article',
  type: 'document',
  title: 'Article',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title'
    }),
    defineField({
      name: 'content',
      type: 'array',
      title: 'Content',
      of: [{type: 'block'}]
    }),
    defineField({
      name: 'linkedArtists',
      type: 'array',
      title: 'Linked Artists',
      of: [defineArrayMember({
        type: 'reference',
        to: [{ type: 'artist' }]
      })]
    })
  ]
});
import { defineType, defineField, defineArrayMember } from 'sanity';

export const artist = defineType({
  name: "artist",
  type: "document",
  title: "Artist",
  fields: [
    defineField({
      name: "name",
      type: "string",
      title: "Name"
    }),
    defineField({
      name: "slug",
      type: "slug",
      title: "Slug",
      options: { source: "name", maxLength: 96 }
    }),
    defineField({
      name: "artistType",
      type: "string",
      title: "Artist Type",
      options: {
        list: [
          { title: "Rapper", value: "rapper" },
          { title: "Producer", value: "producer" }
        ],
      }
    }),
    defineField({
      name: "bio",
      type: "array",
      title: "Biography",
      of: [
        defineArrayMember({
          type: "block",
          styles: [{ title: 'Normal', value: 'normal' }],
          lists: [],
          marks: {
            decorators: [{ title: 'Strong', value: 'strong' }, { title: 'Emphasis', value: 'italic' }],
            annotations: []
          }
        }),
      ],
    }),
    defineField({
      name: "image",
      type: "image",
      title: "Image",
      options: { hotspot: true }
    }),
    defineField({
      name: "musicLinks",
      type: "array",
      title: "Music Links",
      of: [
        defineArrayMember({
          type: "musicLink",
        }),
      ],
    }),
    // Existing fields...
    defineField({
      name: "musicVideos",
      type: "array",
      title: "Music Videos",
      of: [
        defineArrayMember({
          type: "reference",
          to: [{ type: "musicVideo" }]
        }),
      ],
    }),
    defineField({
      name: "blogs",
      type: "array",
      title: "Related Blogs",
      of: [
        defineArrayMember({
          type: "reference",
          to: [{ type: "blog" }],
        }),
      ],
    }),
    defineField({
      name: "linkedArticles",
      type: "array",
      title: "Linked Articles",
      of: [
        defineArrayMember({
          type: "reference",
          to: [{ type: "article" }]  // Assuming 'article' is a defined schema
        }),
      ],
    }),
  ],
});
import { defineType, defineField, defineArrayMember } from 'sanity'

export const blog = defineType({
  type: "document",
  name: "blog",
  fields: [
    defineField({
      type: "string",
      name: "title",
    }),
    defineField({
      type: "slug",
      name: "slug",
      options: { source: "title" },
    }),
    defineField({
      type: "reference",
      name: "author",
      to: [{ type: "artist" }],
    }),
    defineField({
      type: "datetime",
      name: "publishedAt",
    }),
    defineField({
      type: "image",
      name: "image",
      options: { hotspot: true },
    }),
    defineField({
      type: "array",
      name: "content",
      of: [
        defineArrayMember({
          type: "block",
        }),
        defineArrayMember({
          type: "image",
          fields: [
            {
              type: "string",
              name: "caption",
            },
          ],
          options: { hotspot: true },
        }),
      ],
    }),
  ],
});

import { defineType, defineField, defineArrayMember } from 'sanity'

export const event = defineType({
  name: 'event',
  type: 'document',
  title: 'Event',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title'
    }),
    defineField({
      name: 'date',
      type: 'datetime',
      title: 'Date'
    }),
    defineField({
      name: 'location',
      type: 'string',
      title: 'Location'
    }),
    defineField({
      name: 'artists',
      type: 'array',
      title: 'Artists',
      of: [defineArrayMember({
        type: 'reference',
        to: [{ type: 'artist' }]
      })]
    })
  ]
});
import { defineType, defineField, defineArrayMember } from 'sanity';

export const group = defineType({
  name: "group",
  type: "document",
  title: "Music Group",
  fields: [
    defineField({
      name: "name",
      type: "string",
      title: "Group Name"
    }),
    defineField({
      name: "slug",
      type: "slug",
      title: "Slug",
      options: { source: "name", maxLength: 96 }
    }),
    defineField({
      name: "description",
      type: "text",
      title: "Description"
    }),
    defineField({
      name: "image",
      type: "image",
      title: "Image",
      options: { hotspot: true }
    }),
    defineField({
      name: "members",
      type: "array",
      title: "Members",
      of: [
        defineArrayMember({
          type: "reference",
          to: [{ type: "artist" }]
        })
      ],
    }),
    defineField({
      name: "musicLinks",
      type: "array",
      title: "Music Links",
      of: [
        defineArrayMember({
          type: "musicLink",
        }),
      ],
    }),
    defineField({
      name: "musicVideos",
      type: "array",
      title: "Music Videos",
      of: [
        defineArrayMember({
          type: "reference",
          to: [{ type: "musicVideo" }]
        }),
      ],
    }),
    defineField({
      name: "blogs",
      type: "array",
      title: "Blog Posts",
      of: [
        defineArrayMember({
          type: "reference",
          to: [{ type: "blog" }]
        }),
      ],
    }),
    defineField({
      name: "linkedArticles",
      type: "array",
      title: "Linked Articles",
      of: [
        defineArrayMember({
          type: "reference",
          to: [{ type: "article" }]
        }),
      ],
    }),
  ],
});
import { blog } from "./blog";
import { musicLink } from "./musicLink";
import { artist } from "./artist";
import { article } from "./article";
import { event } from "./event";
import { musicVideo } from "./musicVideo";
import { group } from "./group";



export const schemaTypes = [blog, musicLink, artist, event, article, musicVideo, group];
import { defineType, defineField } from 'sanity'

export const musicLink = defineType({
  name: "musicLink",
  type: "object",
  title: "Music Link",
  fields: [
    defineField({
      name: "platform",
      type: "string",
      title: "Platform",
      options: {
        list: [
          { title: "Spotify", value: "spotify" },
          { title: "Apple Music", value: "appleMusic" },
          { title: "SoundCloud", value: "soundCloud" },
          { title: "YouTube", value: "youtube" },
          { title: "Bandcamp", value: "bandcamp" },
          { title: "Tidal", value: "tidal" },
          { title: "Amazon Music", value: "amazonMusic" },
          // Add other platforms as needed
        ],
      },
      validation: Rule => Rule.required()
    }),
    defineField({
      name: "url",
      type: "url",
      title: "URL",
      validation: Rule => Rule.required().uri({
        scheme: ['http', 'https'], // Only allow http and https schemes for security reasons
        allowRelative: false // Do not allow relative URLs
      })
    }),
  ],
});
import { defineType, defineField } from 'sanity';

export const musicVideo = defineType({
  name: "musicVideo",
  type: "document",
  title: "Music Video",
  fields: [
    defineField({
      name: "title",
      type: "string",
      title: "Title"
    }),
    defineField({
      name: "url",
      type: "url",
      title: "Video URL",
      validation: Rule => Rule.required().uri({
        allowRelative: false, // Only absolute URLs
        scheme: ["http", "https"]
      })
    }),
    defineField({
      name: "description",
      type: "text",
      title: "Description"
    }),
    defineField({
      name: "thumbnail",
      type: "image",
      title: "Thumbnail",
      options: { hotspot: true }
    }),
    defineField({
      name: "artist",
      type: "reference",
      to: [{ type: 'artist' }],
      title: "Artist"
    })
  ]
});
